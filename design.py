# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.12.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_HandGestureRecognitionSystem(object):
    def setupUi(self, HandGestureRecognitionSystem):
        HandGestureRecognitionSystem.setObjectName("HandGestureRecognitionSystem")
        HandGestureRecognitionSystem.resize(607, 612)
        self.centralwidget = QtWidgets.QWidget(HandGestureRecognitionSystem)
        self.centralwidget.setObjectName("centralwidget")
        self.startDetection = QtWidgets.QPushButton(self.centralwidget)
        self.startDetection.setGeometry(QtCore.QRect(180, 520, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.startDetection.setFont(font)
        self.startDetection.setStyleSheet("background-color: rgb(136, 255, 0);")
        self.startDetection.setObjectName("startDetection")
        self.open_monitor_btn = QtWidgets.QPushButton(self.centralwidget)
        self.open_monitor_btn.setGeometry(QtCore.QRect(370, 360, 171, 41))
        self.open_monitor_btn.setObjectName("open_monitor_btn")
        self.mode_detection = QtWidgets.QGroupBox(self.centralwidget)
        self.mode_detection.setGeometry(QtCore.QRect(10, 410, 271, 101))
        self.mode_detection.setObjectName("mode_detection")
        self.rb_ip_cam = QtWidgets.QRadioButton(self.mode_detection)
        self.rb_ip_cam.setGeometry(QtCore.QRect(10, 40, 111, 17))
        self.rb_ip_cam.setChecked(False)
        self.rb_ip_cam.setObjectName("rb_ip_cam")
        self.address_cam = QtWidgets.QTextEdit(self.mode_detection)
        self.address_cam.setEnabled(False)
        self.address_cam.setGeometry(QtCore.QRect(10, 60, 251, 31))
        self.address_cam.setObjectName("address_cam")
        self.rb_def_cam = QtWidgets.QRadioButton(self.mode_detection)
        self.rb_def_cam.setGeometry(QtCore.QRect(10, 20, 111, 17))
        self.rb_def_cam.setChecked(True)
        self.rb_def_cam.setObjectName("rb_def_cam")
        self.settings_detection_gb = QtWidgets.QGroupBox(self.centralwidget)
        self.settings_detection_gb.setGeometry(QtCore.QRect(10, 0, 271, 261))
        self.settings_detection_gb.setObjectName("settings_detection_gb")
        self.cnt_hand_lbl = QtWidgets.QLabel(self.settings_detection_gb)
        self.cnt_hand_lbl.setGeometry(QtCore.QRect(10, 90, 251, 31))
        self.cnt_hand_lbl.setWordWrap(True)
        self.cnt_hand_lbl.setObjectName("cnt_hand_lbl")
        self.countHandsCB = QtWidgets.QComboBox(self.settings_detection_gb)
        self.countHandsCB.setGeometry(QtCore.QRect(10, 130, 251, 22))
        self.countHandsCB.setObjectName("countHandsCB")
        self.trsh_segm_sldr = QtWidgets.QSlider(self.settings_detection_gb)
        self.trsh_segm_sldr.setGeometry(QtCore.QRect(10, 200, 221, 22))
        self.trsh_segm_sldr.setMinimum(1)
        self.trsh_segm_sldr.setProperty("value", 50)
        self.trsh_segm_sldr.setOrientation(QtCore.Qt.Horizontal)
        self.trsh_segm_sldr.setObjectName("trsh_segm_sldr")
        self.thr_lbl_segm = QtWidgets.QLabel(self.settings_detection_gb)
        self.thr_lbl_segm.setGeometry(QtCore.QRect(10, 160, 251, 31))
        self.thr_lbl_segm.setLineWidth(1)
        self.thr_lbl_segm.setWordWrap(True)
        self.thr_lbl_segm.setObjectName("thr_lbl_segm")
        self.ver_segm_lbl = QtWidgets.QLabel(self.settings_detection_gb)
        self.ver_segm_lbl.setGeometry(QtCore.QRect(10, 20, 251, 31))
        self.ver_segm_lbl.setWordWrap(True)
        self.ver_segm_lbl.setObjectName("ver_segm_lbl")
        self.rb_segm_1 = QtWidgets.QRadioButton(self.settings_detection_gb)
        self.rb_segm_1.setGeometry(QtCore.QRect(10, 50, 251, 17))
        self.rb_segm_1.setChecked(False)
        self.rb_segm_1.setObjectName("rb_segm_1")
        self.rb_segm_2 = QtWidgets.QRadioButton(self.settings_detection_gb)
        self.rb_segm_2.setGeometry(QtCore.QRect(10, 70, 241, 17))
        self.rb_segm_2.setChecked(True)
        self.rb_segm_2.setObjectName("rb_segm_2")
        self.thr_lbl_segm_val = QtWidgets.QLabel(self.settings_detection_gb)
        self.thr_lbl_segm_val.setGeometry(QtCore.QRect(240, 190, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.thr_lbl_segm_val.setFont(font)
        self.thr_lbl_segm_val.setLineWidth(1)
        self.thr_lbl_segm_val.setWordWrap(True)
        self.thr_lbl_segm_val.setObjectName("thr_lbl_segm_val")
        self.fps_enabled = QtWidgets.QCheckBox(self.settings_detection_gb)
        self.fps_enabled.setEnabled(True)
        self.fps_enabled.setGeometry(QtCore.QRect(60, 240, 161, 17))
        self.fps_enabled.setChecked(False)
        self.fps_enabled.setObjectName("fps_enabled")
        self.send_json_group = QtWidgets.QGroupBox(self.centralwidget)
        self.send_json_group.setGeometry(QtCore.QRect(10, 260, 271, 141))
        self.send_json_group.setObjectName("send_json_group")
        self.cb_json = QtWidgets.QCheckBox(self.send_json_group)
        self.cb_json.setGeometry(QtCore.QRect(10, 20, 251, 17))
        self.cb_json.setChecked(True)
        self.cb_json.setObjectName("cb_json")
        self.ip_host = QtWidgets.QTextEdit(self.send_json_group)
        self.ip_host.setEnabled(True)
        self.ip_host.setGeometry(QtCore.QRect(70, 50, 191, 31))
        self.ip_host.setObjectName("ip_host")
        self.port_host = QtWidgets.QTextEdit(self.send_json_group)
        self.port_host.setEnabled(True)
        self.port_host.setGeometry(QtCore.QRect(70, 100, 191, 31))
        self.port_host.setObjectName("port_host")
        self.ver_segm_lbl_2 = QtWidgets.QLabel(self.send_json_group)
        self.ver_segm_lbl_2.setGeometry(QtCore.QRect(20, 50, 61, 31))
        self.ver_segm_lbl_2.setWordWrap(True)
        self.ver_segm_lbl_2.setObjectName("ver_segm_lbl_2")
        self.ver_segm_lbl_3 = QtWidgets.QLabel(self.send_json_group)
        self.ver_segm_lbl_3.setGeometry(QtCore.QRect(20, 100, 71, 31))
        self.ver_segm_lbl_3.setWordWrap(True)
        self.ver_segm_lbl_3.setObjectName("ver_segm_lbl_3")
        self.open_list_gestures = QtWidgets.QPushButton(self.centralwidget)
        self.open_list_gestures.setGeometry(QtCore.QRect(370, 310, 171, 41))
        self.open_list_gestures.setObjectName("open_list_gestures")
        self.mode_detection_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.mode_detection_2.setGeometry(QtCore.QRect(290, 0, 311, 131))
        self.mode_detection_2.setObjectName("mode_detection_2")
        self.ver_segm_lbl_7 = QtWidgets.QLabel(self.mode_detection_2)
        self.ver_segm_lbl_7.setGeometry(QtCore.QRect(80, 150, 181, 41))
        self.ver_segm_lbl_7.setText("")
        self.ver_segm_lbl_7.setWordWrap(True)
        self.ver_segm_lbl_7.setObjectName("ver_segm_lbl_7")
        self.class_gest_cb = QtWidgets.QComboBox(self.mode_detection_2)
        self.class_gest_cb.setGeometry(QtCore.QRect(140, 20, 161, 22))
        self.class_gest_cb.setObjectName("class_gest_cb")
        self.ver_segm_lbl_6 = QtWidgets.QLabel(self.mode_detection_2)
        self.ver_segm_lbl_6.setGeometry(QtCore.QRect(10, 10, 141, 41))
        self.ver_segm_lbl_6.setWordWrap(True)
        self.ver_segm_lbl_6.setObjectName("ver_segm_lbl_6")
        self.details_cb = QtWidgets.QCheckBox(self.mode_detection_2)
        self.details_cb.setGeometry(QtCore.QRect(10, 100, 141, 17))
        self.details_cb.setChecked(False)
        self.details_cb.setObjectName("details_cb")
        self.ver_segm_lbl_9 = QtWidgets.QLabel(self.mode_detection_2)
        self.ver_segm_lbl_9.setGeometry(QtCore.QRect(20, 60, 111, 21))
        self.ver_segm_lbl_9.setWordWrap(True)
        self.ver_segm_lbl_9.setObjectName("ver_segm_lbl_9")
        self.on_off_image = QtWidgets.QLabel(self.mode_detection_2)
        self.on_off_image.setGeometry(QtCore.QRect(210, 50, 31, 31))
        self.on_off_image.setObjectName("on_off_image")
        self.sett_class_cnn = QtWidgets.QPushButton(self.centralwidget)
        self.sett_class_cnn.setGeometry(QtCore.QRect(370, 260, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.sett_class_cnn.setFont(font)
        self.sett_class_cnn.setObjectName("sett_class_cnn")
        self.thr_lbl_class_val = QtWidgets.QLabel(self.centralwidget)
        self.thr_lbl_class_val.setGeometry(QtCore.QRect(560, 150, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.thr_lbl_class_val.setFont(font)
        self.thr_lbl_class_val.setLineWidth(1)
        self.thr_lbl_class_val.setWordWrap(True)
        self.thr_lbl_class_val.setObjectName("thr_lbl_class_val")
        self.trsh_class_sldr = QtWidgets.QSlider(self.centralwidget)
        self.trsh_class_sldr.setGeometry(QtCore.QRect(310, 160, 241, 22))
        self.trsh_class_sldr.setMinimum(5)
        self.trsh_class_sldr.setMaximum(30)
        self.trsh_class_sldr.setProperty("value", 15)
        self.trsh_class_sldr.setOrientation(QtCore.Qt.Horizontal)
        self.trsh_class_sldr.setObjectName("trsh_class_sldr")
        self.thr_lbl_class = QtWidgets.QLabel(self.centralwidget)
        self.thr_lbl_class.setGeometry(QtCore.QRect(310, 130, 261, 31))
        self.thr_lbl_class.setLineWidth(1)
        self.thr_lbl_class.setWordWrap(True)
        self.thr_lbl_class.setObjectName("thr_lbl_class")
        HandGestureRecognitionSystem.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(HandGestureRecognitionSystem)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 607, 21))
        self.menubar.setObjectName("menubar")
        HandGestureRecognitionSystem.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(HandGestureRecognitionSystem)
        self.statusbar.setObjectName("statusbar")
        HandGestureRecognitionSystem.setStatusBar(self.statusbar)

        self.retranslateUi(HandGestureRecognitionSystem)
        QtCore.QMetaObject.connectSlotsByName(HandGestureRecognitionSystem)

    def retranslateUi(self, HandGestureRecognitionSystem):
        _translate = QtCore.QCoreApplication.translate
        HandGestureRecognitionSystem.setWindowTitle(_translate("HandGestureRecognitionSystem", "Система распознавания жестов руки"))
        self.startDetection.setText(_translate("HandGestureRecognitionSystem", "Включить отслеживание"))
        self.open_monitor_btn.setText(_translate("HandGestureRecognitionSystem", "Открыть мониторинг"))
        self.mode_detection.setTitle(_translate("HandGestureRecognitionSystem", "Режим отслеживания"))
        self.rb_ip_cam.setText(_translate("HandGestureRecognitionSystem", "IP Камера"))
        self.address_cam.setHtml(_translate("HandGestureRecognitionSystem", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">http://192.168.0.84:8080/video</p></body></html>"))
        self.rb_def_cam.setText(_translate("HandGestureRecognitionSystem", "Обычная камера"))
        self.settings_detection_gb.setTitle(_translate("HandGestureRecognitionSystem", "Преднастройка сегментирующей NN"))
        self.cnt_hand_lbl.setText(_translate("HandGestureRecognitionSystem", "Максимально отслеживаемое количество рук:"))
        self.thr_lbl_segm.setText(_translate("HandGestureRecognitionSystem", "Порог чувствительности сегментирующей нейронной сети:"))
        self.ver_segm_lbl.setText(_translate("HandGestureRecognitionSystem", "Версия сегментирующей нейронной сети:"))
        self.rb_segm_1.setText(_translate("HandGestureRecognitionSystem", "1 (Хуже сегментирует, меньше  ошибок)"))
        self.rb_segm_2.setText(_translate("HandGestureRecognitionSystem", "2 (Точнее сегментирует, больше ошибок)"))
        self.thr_lbl_segm_val.setText(_translate("HandGestureRecognitionSystem", "0.5"))
        self.fps_enabled.setText(_translate("HandGestureRecognitionSystem", "Показывать счетчик FPS"))
        self.send_json_group.setTitle(_translate("HandGestureRecognitionSystem", "Передача данных стороннему ПО (UDP)"))
        self.cb_json.setText(_translate("HandGestureRecognitionSystem", "Передавать результаты в виде JSON (UTF-8)"))
        self.ip_host.setHtml(_translate("HandGestureRecognitionSystem", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">127.0.0.1</p></body></html>"))
        self.port_host.setHtml(_translate("HandGestureRecognitionSystem", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">9876</p></body></html>"))
        self.ver_segm_lbl_2.setText(_translate("HandGestureRecognitionSystem", "IP Адрес"))
        self.ver_segm_lbl_3.setText(_translate("HandGestureRecognitionSystem", "Port"))
        self.open_list_gestures.setText(_translate("HandGestureRecognitionSystem", "Редактировать список жестов"))
        self.mode_detection_2.setTitle(_translate("HandGestureRecognitionSystem", "Режим ожидания"))
        self.ver_segm_lbl_6.setText(_translate("HandGestureRecognitionSystem", "Жест отвечающий за пробуждение"))
        self.details_cb.setText(_translate("HandGestureRecognitionSystem", "Детали классификации"))
        self.ver_segm_lbl_9.setText(_translate("HandGestureRecognitionSystem", "Активность  системы"))
        self.on_off_image.setText(_translate("HandGestureRecognitionSystem", "Image"))
        self.sett_class_cnn.setText(_translate("HandGestureRecognitionSystem", "Редактировать NN"))
        self.thr_lbl_class_val.setText(_translate("HandGestureRecognitionSystem", "15"))
        self.thr_lbl_class.setText(_translate("HandGestureRecognitionSystem", "Количество фреймов при котором жест считается распознанным:"))


